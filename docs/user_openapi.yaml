openapi: 3.0.0
info:
  description: "Учебный стенд для QA по Kafka: отправка событий продюсером,
    обработка 3 консьюмерами, запись в Postgres, проверка сценариев (порядок,
    дубликаты, DLQ, лаги)."
  title: QA Kafka Lab — HR Profiles Trainer
  contact: {}
  license:
    name: MIT
    url: https://opensource.org/license/mit
  version: "1.0"
paths:
  /admin/reset:
    post:
      tags:
        - Admin
      summary: Полная очистка данных тренажёра (truncate lab.*)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.okResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
  /dlq:
    get:
      tags:
        - Producer
      summary: Сообщения DLQ
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/dto.KafkaDLQ"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                type: string
  /events:
    get:
      tags:
        - Producer
      summary: Сырые события (эмуляция kafka_events)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/dto.KafkaEvent"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                type: string
  /health:
    get:
      tags:
        - Admin
      summary: Проверка здоровья сервиса
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.okResponse"
  /history:
    post:
      tags:
        - CRUD-History
      summary: Добавить запись в историю работы
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dto.EmploymentHistory"
        description: История
        required: true
      responses:
        "400":
          description: Отсутствует employee_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
  "/history/{employee_id}":
    get:
      tags:
        - CRUD-History
      summary: История работы сотрудника
      parameters:
        - description: Идентификатор сотрудника
          name: employee_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dto.EmploymentHistory"
        "400":
          description: Отсутствует employee_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "404":
          description: Сотрудник не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
  "/history/{id}":
    put:
      tags:
        - CRUD-History
      summary: Обновить запись истории
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dto.EmploymentHistory"
        description: Изменяемые поля
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.okResponse"
        "400":
          description: Отсутствует id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "404":
          description: Запись не найдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
    delete:
      tags:
        - CRUD-History
      summary: Удалить запись истории
      parameters:
        - description: ID записи истории
          name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "400":
          description: Отсутствует id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "404":
          description: История не найдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
  /producer/history:
    post:
      tags:
        - Producer
      summary: Публикация события в hr.history
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api.historyProduceRequest"
        description: payload
        required: true
      responses:
        "400":
          description: Отсутствует message_id/employee_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
  /producer/personal:
    post:
      tags:
        - Producer
      summary: Публикация события в hr.personal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api.personalProduceRequest"
        description: payload
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.okResponse"
        "400":
          description: Отсутствует message_id/employee_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
  /producer/position:
    post:
      tags:
        - Producer
      summary: Публикация события в hr.positions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api.positionProduceRequest"
        description: payload
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.okResponse"
        "400":
          description: Отсутствует message_id/employee_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
  /profiles:
    get:
      tags:
        - CRUD-Profiles
      summary: Список профилей сотрудников
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/dto.EmployeeProfile"
        "500":
          description: InternalError — внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
    post:
      tags:
        - CRUD-Profiles
      summary: Создать профиль
      requestBody:
        $ref: "#/components/requestBodies/dto.EmployeeProfile"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.okResponse"
        "400":
          description: Отсутствует employee_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "409":
          description: Профиль уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
  "/profiles/{employee_id}":
    get:
      tags:
        - CRUD-Profiles
      summary: Получить профиль по employee_id
      parameters:
        - description: Идентификатор сотрудника
          name: employee_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dto.EmployeeProfile"
        "400":
          description: Отсутствует employee_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "404":
          description: Сотрудник не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
    put:
      tags:
        - CRUD-Profiles
      summary: Обновить профиль
      parameters:
        - description: Идентификатор сотрудника
          name: employee_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/dto.EmployeeProfile"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.okResponse"
        "400":
          description: Отсутствует employee_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "404":
          description: Сотрудник не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
    delete:
      tags:
        - CRUD-Profiles
      summary: Удалить профиль
      parameters:
        - description: Идентификатор сотрудника
          name: employee_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.okResponse"
        "400":
          description: Отсутствует employee_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "404":
          description: Сотрудник не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
        "500":
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.errorResponse"
servers:
  - url: http://127.0.0.1:8080

    description: Swagger UI
  - url: /
components:
  requestBodies:
    dto.EmployeeProfile:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/dto.EmployeeProfile"
      description: Профиль
      required: true
  schemas:
    api.errorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    api.historyProduceRequest:
      type: object
      properties:
        company:
          description: Компания
          type: string
          example: ООО Ромашка
        employee_id:
          description: Идентификатор сотрудника
          type: string
          example: e-1024
        message_id:
          description: Идентификатор события (UUIDv4)
          type: string
          example: 0f2eb2b1-6a25-4d2a-8a7e-2c642e00e5ed
        period_from:
          description: Начало периода (YYYY-MM-DD)
          type: string
          example: 2022-07-01
        period_to:
          description: Окончание периода (YYYY-MM-DD)
          type: string
          example: 2025-09-30
        position:
          description: Должность (опционально)
          type: string
          example: Инженер QA
        stack:
          description: Стек (список строк)
          type: array
          items:
            type: string
          example:
            - Python
            - Pytest
            - PostgreSQL
    api.okResponse:
      type: object
      properties:
        msg:
          type: string
          example: Готово
        status:
          type: string
          example: ok
    api.personalProduceRequest:
      type: object
      properties:
        birth_date:
          description: Дата рождения (YYYY-MM-DD)
          type: string
          example: 1994-06-12
        email:
          description: Email
          type: string
          example: anna@mail.ru
        employee_id:
          description: Идентификатор сотрудника
          type: string
          example: e-1024
        first_name:
          description: Имя
          type: string
          example: Анна
        last_name:
          description: Фамилия
          type: string
          example: Иванова
        message_id:
          description: Идентификатор события (UUIDv4)
          type: string
          example: 6b6f9c38-3e2a-4b3d-9a9a-9f1c0f8b2a10
        phone:
          description: Телефон
          type: string
          example: +7 916 123-45-67
    api.positionProduceRequest:
      type: object
      properties:
        department:
          description: Подразделение
          type: string
          example: Отдел качества
        effective_from:
          description: Дата вступления в силу (YYYY-MM-DD)
          type: string
          example: 2025-10-01
        employee_id:
          description: Идентификатор сотрудника
          type: string
          example: e-1024
        grade:
          description: Грейд
          type: string
          example: Middle
        message_id:
          description: Идентификатор события (UUIDv4)
          type: string
          example: a1d2f3c4-5678-4abc-9def-0123456789ab
        title:
          description: Должность
          type: string
          example: Инженер по тестированию
    dto.EmployeeProfile:
      type: object
      properties:
        birth_date:
          description: Дата рождения в формате YYYY-MM-DD
          type: string
          example: 1994-06-12
        department:
          description: Подразделение/отдел
          type: string
          example: Отдел качества
        effective_from:
          description: Дата вступления изменений в силу (YYYY-MM-DD)
          type: string
          example: 2025-10-01
        email:
          description: Корпоративная/личная почта сотрудника
          type: string
          example: anna@mail.ru
        employee_id:
          description: Идентификатор сотрудника
          type: string
          example: e-1024
        first_name:
          description: Имя сотрудника
          type: string
          example: Анна
        grade:
          description: Грейд (Junior, Middle, Senior или другой)
          type: string
          example: Middle
        last_name:
          description: Фамилия сотрудника
          type: string
          example: Иванова
        phone:
          description: Телефон
          type: string
          example: +7 916 123-45-67
        title:
          description: Должность
          type: string
          example: Инженер по тестированию
        updated_at:
          type: string
    dto.EmploymentHistory:
      type: object
      properties:
        company:
          description: Компания
          type: string
          example: ООО Ромашка
        created_at:
          description: Время создания записи
          type: string
          example: 2025-10-19T10:15:30Z
        employee_id:
          description: Идентификатор сотрудника
          type: string
          example: e-1024
        id:
          description: Идентификатор записи (БД)
          type: integer
          example: 42
        period_from:
          description: Дата начала периода занятости (YYYY-MM-DD)
          type: string
          example: 2022-07-01
        period_to:
          description: Дата окончания периода занятости (YYYY-MM-DD)
          type: string
          example: 2025-09-30
        position:
          description: Должность
          type: string
          example: Инженер QA
        stack:
          description: Технологический стек (список строк)
          type: array
          items:
            type: string
          example:
            - Python
            - Pytest
            - PostgreSQL
    dto.KafkaDLQ:
      type: object
      properties:
        error:
          type: string
        id:
          type: integer
        key:
          type: string
        payload:
          type: array
          items:
            type: integer
        received_at:
          type: string
        topic:
          type: string
    dto.KafkaEvent:
      type: object
      properties:
        id:
          type: integer
        key:
          type: string
        message_id:
          type: string
        offset:
          type: integer
        partition:
          type: integer
        payload:
          type: array
          items:
            type: integer
        received_at:
          type: string
        topic:
          type: string
